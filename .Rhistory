setwd("~/Bildung/Technische Universit√§t Berlin/Master/Auslandssemester/Courses/BAN400/Assignments/Assignment 5 - Git/git-maltekasiske")
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
separator_line <- grep["^-+", original_data]
separator_line <- grep("^-+", original_data)
L <- separator_line[1]
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
descriptions <- original_data[1:(L-2)]
writeLines(descriptions, "variable_descriptions.txt")
# Comments below describes briefly a set of steps that solves Problem 1.
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
variable_descriptions <- original_data[1:(L-2)]
writeLines(descriptions, "variable_descriptions.txt")
writeLines(variable_descriptions, "variable_descriptions.txt")
variable_names <- strsplit(data_lines[L-1], "\\s+\\|\\s+")[[1]]
variable_names <- strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]]
variable_names
variable_names <- trimws(strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]])
variable_names
cleaned_data <- original_data[(L+1):length(original_data)]
csv_data <- paste(variable_names, collapse = ", ")
writeLines(csv_data, "data.csv")
writeLines(cleaned_data, "data.csv", append = TRUE)
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
variable_descriptions <- original_data[1:(L-2)]
writeLines(variable_descriptions, "variable_descriptions.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- trimws(strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]])
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
cleaned_data <- original_data[(L+1):length(original_data)]
writeLines(paste(variable_names, collapse = ", "), "cleaned_data.csv")
writeLines(cleaned_data, "cleaned_data.csv", append = TRUE)
# Skeleton file 1 for Assignment 1 in BAN400.
# -------------------------------------------
# Comments below describes briefly a set of steps that solves Problem 1.
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
variable_descriptions <- original_data[1:(L-2)]
writeLines(variable_descriptions, "variable_descriptions.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- trimws(strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]])
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
cleaned_data <- original_data[(L+1):length(original_data)]
writeLines(paste(variable_names, collapse = ", "), "cleaned_data.csv")
write.table(cleaned_data, "cleaned_data.csv", append = TRUE, sep = ",", col.names = FALSE)
# Read the finished .csv back into R in the normal way.
finished_csv_data <- read.csv("cleaned_data.csv", header = FALSE)
head(finished_csv_data)
# Read the finished .csv back into R in the normal way.
finished_csv_data <- read.csv("cleaned_data.csv")
head(finished_csv_data)
, header = FALSE
head(finished_csv_data)
original_data
str(original_data)
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
data_matrix <- matrix(unlist(strsplit(cleaned_data, "\\s+")), ncol = length(variable_names), byrow = TRUE)
data_df <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
colnames(data_df) <- variable_names
View(data_df)
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
data_matrix <- matrix(unlist(strsplit(cleaned_data, "\\s+\\|\\s*")), ncol = length(variable_names), byrow = TRUE)
data_df <- as.data.frame(data_matrix, stringsAsFactors = FALSE)
colnames(data_df) <- variable_names
View(data_df)
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
temp_connection <- textConnection(cleaned_data)
data_df <- read.table(temp_connection, sep = "\\s+")
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
temp_connection <- textConnection(cleaned_data)
data_df <- read.table(temp_connection, sep = "\\s+", fill = TRUE, na.strings = "")
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
temp_connection <- textConnection(cleaned_data)
data_df <- read.table(temp_connection, sep = "", fill = TRUE, na.strings = "")
close(temp_connection)
colnames(data_df) <- variable_names
View(data_df)
L <- grep("^-+", original_data)
data_lines <- original_data[(L+1):length(original_data)]
cleaned_data <- gsub("\\|", "", data_lines)
temp_connection <- textConnection(cleaned_data)
data_df <- read.table(temp_connection, sep = "", fill = TRUE, na.strings = "NA")
close(temp_connection)
colnames(data_df) <- variable_names
View(data_df)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_separated_values <-
original_data[(L+1):length(original_data)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Load required packages
library(tidyverse)
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_separated_values <-
original_data[(L+1):length(original_data)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Combine variable names with data and write to a CSV file
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
comma_separated_values_with_names
writeLines(comma_separated_values_with_names, sep = "\n", file = "galaxies.csv")
cat(comma_separated_values_with_names, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
galaxies <- read.csv("cleaned_data.csv")
# Read the finished .csv back into R in the normal way.
galaxies <- read.csv("galaxies.csv")
# Skeleton file 1 for Assignment 1 in BAN400.
# -------------------------------------------
# Load required packages
library(tidyverse)
# Comments below describes briefly a set of steps that solves Problem 1.
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
variable_descriptions <- original_data[1:(L-2)]
writeLines(variable_descriptions, "variable_descriptions.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- trimws(strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]])
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_separated_values <-
original_data[(L+1):length(original_data)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
cat(comma_separated_values_with_names, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
galaxies <- read.csv("galaxies.csv")
View(galaxies)
View(galaxies)
library(ggplot2)
ggplot(data = galaxies, aes(x = a_26)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(x = "Linear Diameter (kpc)", y = "Frequency") +
ggtitle("Distribution of Linear Diameter") +
theme_minimal()
# Create a histogram of the linear diameter 'a_26'
ggplot(data = galaxies, aes(x = a_26)) +
geom_histogram(binwidth = 0.5, fill = "black") +
labs(x = "Linear Diameter (kpc)", y = "Frequency") +
ggtitle("Distribution of Linear Diameter") +
theme_minimal()
View(galaxies)
# Skeleton file 1 for Assignment 1 in BAN400.
# -------------------------------------------
##############################
# Load required packages
library(tidyverse)
library(ggplot2)
##############################
##############################
# PROBLEM 2
##############################
# Comments below describes briefly a set of steps that solves Problem 1.
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
original_data <- readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
L <- grep("^-+", original_data)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function
variable_descriptions <- original_data[1:(L-2)]
writeLines(variable_descriptions, "variable_descriptions.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
variable_names <- trimws(strsplit(original_data[L-1], "\\s+\\|\\s+")[[1]])
# Read the data. One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
comma_separated_values <-
original_data[(L+1):length(original_data)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
cat(comma_separated_values_with_names, file = "galaxies.csv", sep = "\n")
# Read the finished .csv back into R in the normal way.
galaxies <- read.csv("galaxies.csv")
##############################
# PROBLEM 3
##############################
# Create a histogram of the linear diameter a_26
ggplot(data = galaxies, aes(x = a_26)) +
geom_histogram(binwidth = 0.5, fill = "black") +
labs(x = "Linear Diameter (kpc)", y = "Frequency") +
ggtitle("Distribution of Linear Diameter") +
theme_minimal()
